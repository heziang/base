<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">


 <!-- 配置不需要安全管理的界面 -->
    <http pattern="/common/login.jsp" security="none" />
    <http pattern="/common/accessDenied.jsp" security="none" />  
    <http pattern="/**/*.js" security="none" /> 
    <http pattern="/**/*.css" security="none" /> 
    <http pattern="/**/*.swf" security="none" /> 
    <http pattern="/**/*.png" security="none" /> 
    <http pattern="/**/*.jpg" security="none" /> 
    <http pattern="/**/*.gif" security="none" /> 
    
     <http use-expressions='true' entry-point-ref="myAuthenticationEntryPoint"  access-denied-page="/common/accessDenied.jsp">
                <session-management>
                        <concurrency-control max-sessions="1"  error-if-maximum-exceeded="false" />
                </session-management>
                
                <!-- 认证和授权 --><!-- 重写登陆认证的过滤器，使我们可以拿到任何参数  -->
                <custom-filter ref="myAuthenticationFilter" position="FORM_LOGIN_FILTER"  />
                <custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR" />
                
                 <!-- 登出管理 -->
        		<logout invalidate-session="true" logout-url="/j_spring_security_logout" />
        </http>
        
        <!-- 未登录的切入点 --><!-- 需要有个切入点 -->
    <b:bean id="myAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <b:property name="loginFormUrl" value="/common/login.jsp"></b:property>
    </b:bean>
        
    <!-- 登录验证器：用户有没有登录的资格 --><!-- 这个就是重写的认证过滤器 -->
    <b:bean id="myAuthenticationFilter" class="cloud.base.security.SecurityAuthenticationFilter">
        <b:property name="authenticationManager" ref="authenticationManager" />
        <b:property name="filterProcessesUrl" value="/common/j_spring_security_check" />
        <b:property name="authenticationSuccessHandler">
        <!--登陆认证成功后的处理器  -->
            <b:bean class="cloud.base.security.SecuritySavedRequestAwareAuthenticationSuccessHandler">
                <b:property name="defaultTargetUrl" value="/common/index.jsp" />
                <b:property name="targetUrlParameter" value="/common/index.jsp" />
            </b:bean>
        </b:property>
        <b:property name="authenticationFailureHandler">
        	  <!--登陆认证失败后的处理器  -->
            <b:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                <b:property name="defaultFailureUrl" value="/common/login.jsp" />
            </b:bean>
        </b:property>
    </b:bean>
        
        
     <!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<b:bean id="securityFilter" class="cloud.base.security.SecurityFilterSecurityInterceptor">
		<b:property name="authenticationManager" ref="authenticationManager" />
		<b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<b:property name="securityMetadataSource" ref="securityMetadataSource" />
	</b:bean>
	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
			<!--如果用户的密码采用加密的话  -->
			<password-encoder hash="md5" />
		</authentication-provider>
	</authentication-manager>
	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<b:bean id="myUserDetailService" class="cloud.base.security.SecurityUserDetailService" />
	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<b:bean id="myAccessDecisionManagerBean" class="cloud.base.security.SecurityAccessDecisionManager">
	</b:bean>
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<b:bean id="securityMetadataSource" class="cloud.base.security.SecurityInvocationSecurityMetadataSource" /> 
	<!--国际化-->
	<b:bean id="messageSource"    class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
   		<b:property name="basename" value="classpath:cloud/base/security/messages_zh_CN"/>
	</b:bean>
 </b:beans>